pipeline {

  agent {
    kubernetes {
      yamlFile 'result/build-agent.yaml'
      defaultContainer 'nodejs'
      idleMinutes 1
    }
  }

  stages{

    stage('Build') {
      when {
        changeset "**/result/**"
      }
      parallel {
        stage('npm install') {
          steps {
            container('nodejs') {
              dir('result') {
                sh 'npm install'
              }
            }
          }
        }
      }
    }

    stage('Unit Tests') {
      when {
        changeset "**/result/**"
      }
      parallel {
        stage('npm test') {
          steps {
            container('nodejs') {
              dir('result') {
                sh 'npm install'
                sh 'npm test'
              }
            }
          }
        }
      }
    }

    stage('SCA') {
      when {
        changeset "**/result/**"
      }
      parallel {
        stage('Dependency Check') {
          steps {
            container('nodejs') {
              dir('result') {
                //catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                sh 'npm install dependency-check -g'
                sh 'dependency-check ./*.js ./views/*.js ./test/*.js --ignore-module mocha'
                //}
              }
            }
          }
          //post {
            //always {
              //archiveArtifacts allowEmptyArchive: true, artifacts: 'vote/target/dependency-check-report.html', fingerprint: true, onlyIfSuccessful: true
              //dependencyCheckPublisher pattern: 'report.xml'
            //}
          //}
        }
        stage('OSS License Check') {
          steps {
            container('licensefinder') {
              dir('result') {
                sh 'ls -al'
                sh '''#!/bin/bash --login
                        /bin/bash --login
                        rvm use default
                        gem install license_finder
                        license_finder
                      '''
              }
            }
          }
        }
      }
    }

    stage('SAST') {
      when {
        changeset "**/result/**"
      }
      environment {
        SONAR_TOKEN = credentials('sonar-instavote-result')
      }
      parallel {
        stage('SonarScanner') {
          steps {
            container('sonarscanner') {
              dir('result') {
                sh "sonar-scanner -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=https://sonarcloud.io"
              }
            }
          }
        }
      }
    }

    stage('Package') {
      when {
        branch 'master'
        changeset "**/result/**"
      }
      parallel {
        stage('OCI image BnP') {
          steps {
            container('kaniko') {
              dir('result') {
                sh "/kaniko/executor -f `pwd`/Dockerfile -c `pwd` --insecure --skip-tls-verify --cache=true --destination=docker.io/xvag/result2:v${env.BUILD_ID}"
              }
            }
          }
        }
      }
    }

    stage('Image Analysis') {
      when {
        branch 'master'
        changeset "**/result/**"
      }
      parallel {
        stage('Image Linting') {
          steps {
            container('docker-tools') {
              sh "dockle docker.io/xvag/result2:v${env.BUILD_ID}"
            }
          }
        }
        stage('Image Scan') {
          steps {
            container('docker-tools') {
              //sh "trivy image --exit-code 1 xvag/result2:v${env.BUILD_ID}"
              sh "trivy image xvag/vote2:v${env.BUILD_ID}"
            }
          }
        }
      }
    }

    stage('Package :latest') {
      when {
        branch 'master'
        changeset "**/result/**"
      }
      parallel {
        stage('BnP :latest') {
          steps {
            container('kaniko') {
              dir('result') {
                sh "/kaniko/executor -f `pwd`/Dockerfile -c `pwd` --insecure --skip-tls-verify --cache=true --destination=docker.io/xvag/result2:latest"
              }
            }
          }
        }
      }
    }

  }
  post{
    always{
        echo 'Building multibranch pipeline for result is completed...'
    }
  }
}
