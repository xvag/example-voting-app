pipeline {

  agent {
    kubernetes {
      yamlFile 'result/build-agent.yaml'
      defaultContainer 'nodejs'
      idleMinutes 1
    }
  }

  stages{

    stage('Build') {
      when {
        changeset "**/result/**"
      }
      parallel {
        stage('Compile') {
          steps {
            container('nodejs') {
              dir('result'){
                sh 'npm install'
              }
            }
          }
        }
      }
    }

    stage('Unit Tests') {
      when {
        changeset "**/result/**"
      }
      steps {
        container('nodejs') {
          dir('result'){
            sh 'npm install'
            sh 'npm test'
          }
        }
      }
    }

    stage('SCA') {
      when {
        changeset "**/result/**"
      }
      parallel {
        stage('Dependency Check') {
          steps {
            container('nodejs') {
              dir('result'){
                //catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                sh 'npm install dependency-check -g'
                sh 'dependency-check ./*.js ./views/*.js ./test/*.js --ignore-module mocha'
                //}
              }
            }
          }
          //post {
            //always {
              //archiveArtifacts allowEmptyArchive: true, artifacts: 'vote/target/dependency-check-report.html', fingerprint: true, onlyIfSuccessful: true
              //dependencyCheckPublisher pattern: 'report.xml'
            //}
          //}
        }
        stage('OSS License Check') {
          steps {
            container('licensefinder') {
              dir('result'){
                sh 'ls -al'
                sh '''#!/bin/bash --login
                        /bin/bash --login
                        rvm use default
                        gem install license_finder
                        license_finder
                      '''
              }
            }
          }
        }
      }
    }

    stage('SAST') {
      when {
        changeset "**/result/**"
      }
      parallel {
        stage('Sonarqube'){
          agent any
           //tools{
             //jdk "JDK11" // the name you have given the JDK installation in Global Tool Configuration
           //}
          environment{
            sonarpath = tool 'SonarScanner'
          }
          steps{
            echo 'Running Sonarqube Analysis..'
            withSonarQubeEnv('InstavoteSonarCloud'){
              //sh "/var/jenkins_home/tools/hudson.plugins.sonar.SonarRunnerInstallation/SonarScanner/bin/sonar-scanner -Dproject.settings=sonar-project.properties -Dorg.jenkinsci.plugins.durabletask.BourneShellScript.HEARTBEAT_CHECK_INTERVAL=86400"
              sh "${sonarpath}/bin/sonar-scanner -Dproject.settings=sonar-project.properties -Dorg.jenkinsci.plugins.durabletask.BourneShellScript.HEARTBEAT_CHECK_INTERVAL=86400"
            }
          }
        }
        stage("Quality Gate"){
          agent any
          steps {
            timeout(time: 1, unit: 'HOURS') {
              // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
              // true = set pipeline to UNSTABLE, false = don't
              waitForQualityGate abortPipeline: true
            }
          }
        }
      }
    }

    stage('Package') {
      when {
        branch 'master'
        changeset "**/result/**"
      }
      parallel {
        stage('OCI image BnP') {
          steps {
            container('kaniko') {
              dir('result') {
                sh "/kaniko/executor -f `pwd`/Dockerfile -c `pwd` --insecure --skip-tls-verify --cache=true --destination=docker.io/xvag/result2:v${env.BUILD_ID}"
              }
            }
          }
        }
      }
    }

    stage('Image Analysis') {
      when {
        branch 'master'
        changeset "**/result/**"
      }
      parallel {
        stage('Image Linting') {
          steps {
            container('docker-tools') {
              sh "dockle docker.io/xvag/result2:v${env.BUILD_ID}"
            }
          }
        }
        stage('Image Scan') {
          steps {
            container('docker-tools') {
              sh "trivy image --exit-code 1 xvag/result2:v${env.BUILD_ID}"
              //sh 'trivy image xvag/vote2'
            }
          }
        }
      }
    }

  }
  post{
    always{
        echo 'Building multibranch pipeline for result is completed...'
    }
  }
}
