pipeline {

  agent {
    kubernetes {
      yamlFile 'vote/build-agent.yaml'
      defaultContainer 'python'
      idleMinutes 1
    }
  }

  stages{

      stage('Unit Tests') {
        when {
          changeset "**/vote/**"
        }
        parallel {
          stage('pip check') {
            steps {
              container('python') {
                dir('vote'){
                  sh 'pip install -r requirements.txt'
                }
              }
            }
          }
        }
      }

      stage('SCA') {
        when{
          changeset "**/vote/**"
        }
        parallel {
          stage('pyraider') {
            steps {
              container('python') {
                dir('vote'){
                  sh 'pyraider check -f requirements.txt'
                }
              }
            }
          }
          stage('OSS License Checker') {
            steps {
              container('licensefinder') {
                dir('vote'){
                  sh 'ls -al'
                  sh '''#!/bin/bash --login
                          /bin/bash --login
                          rvm use default
                          gem install license_finder
                          pip install -r requirements.txt
                          license_finder
                        '''
                }
              }
            }
          }
        }
      }

      stage('SAST') {
        when {
          changeset "**/vote/**"
        }
        environment {
          SONAR_TOKEN = credentials('sonar-instavote-vote')
        }
        parallel {
          stage('SonarScanner') {
            steps {
              container('sonarscanner') {
                dir('vote') {
                  sh "sonar-scanner -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=https://sonarcloud.io"
                }
              }
            }
          }
        }
      }

      stage('Package') {
        when {
          branch 'master'
          changeset "**/vote/**"
        }
        parallel {
          stage('OCI image BnP') {
            steps {
              container('kaniko') {
                dir('vote') {
                  sh "/kaniko/executor -f `pwd`/Dockerfile -c `pwd` --insecure --skip-tls-verify --cache=true --destination=docker.io/xvag/vote2:v${env.BUILD_ID}"
                }
              }
            }
          }
        }
      }

      stage('Image Analysis') {
        when {
          branch 'master'
          changeset "**/vote/**"
        }
        parallel {
          stage('Image Linting') {
            steps {
              container('docker-tools') {
                sh "dockle docker.io/xvag/vote2:v${env.BUILD_ID}"
              }
            }
          }
          stage('Image Scan') {
            steps {
              container('docker-tools') {
                sh "trivy image --exit-code 1 xvag/vote2:v${env.BUILD_ID}"
                //sh "trivy image xvag/vote2:v${env.BUILD_ID}"
              }
            }
          }
        }
      }

  }
  post {
    always {
        echo 'Building multibranch pipeline for vote is completed...'
    }
  }
}
