pipeline {

  agent {
    kubernetes {
      yamlFile 'worker/build-agent.yaml'
      defaultContainer 'maven'
      idleMinutes 1
    }
  }

  stages {
    stage('Build') {
      when {
        changeset "**/worker/**"
      }
      parallel {
        stage('Compile') {
          steps {
            container('maven') {
              dir('worker'){
                sh 'mvn compile'
              }
            }
          }
        }
      }
    }

    stage('Static Analysis') {
      when {
        changeset "**/worker/**"
      }
      parallel {
        stage('Unit Tests') {
          steps {
            container('maven') {
              dir('worker'){
                sh 'mvn test'
              }
            }
          }
        }
        stage('SCA') {
          steps {
            container('maven') {
              dir('worker'){
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                  sh 'mvn org.owasp:dependency-check-maven:check'
                }
              }
            }
          }
          post {
            always {
              archiveArtifacts allowEmptyArchive: true, artifacts: 'worker/target/dependency-check-report.html', fingerprint: true, onlyIfSuccessful: true
              //dependencyCheckPublisher pattern: 'report.xml'
            }
          }
        }
        stage('OSS License Checker') {
          steps {
            container('licensefinder') {
              dir('worker'){
                sh 'ls -al'
                sh '''#!/bin/bash --login
                        /bin/bash --login
                        rvm use default
                        gem install license_finder
                        license_finder
                      '''
              }
            }
          }
        }
      }
    }

    stage('Package') {
      when {
        branch 'master'
        changeset "**/worker/**"
      }
      parallel {
        stage('Create Jarfile') {
          steps {
            container('maven') {
              sh 'mvn package -DskipTests'
              archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            }
          }
        }
        stage('OCI image BnP') {
          steps {
            container('kaniko') {
              sh '/kaniko/executor -f `pwd`/worker/Dockerfile -c `pwd` --insecure --skip-tls-verify --cache=true --destination=docker.io/xvag/worker2'
            }
          }
        }
      }
    }

    stage('Image Analysis') {
      when {
        branch 'master'
        changeset "**/worker/**"
      }
      parallel {
        stage('Image Linting') {
          steps {
            container('docker-tools') {
              sh 'dockle docker.io/xvag/worker2'
            }
          }
        }
        stage('Image Scan') {
          steps {
            container('docker-tools') {
              sh 'trivy image --exit-code 1 xvag/dsodemo'
              sh 'trivy image xvag/worker2'
            }
          }
        }
      }
    }

  }
  post{
    always{
        echo 'Building multibranch pipeline for worker is completed...'
    }
  }
}
